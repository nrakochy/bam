<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1474573572289">{:repl-history {:ide [], :local [&quot;(def t1 :user/first-name)&quot; &quot;t1&quot; &quot;(namespace t1)&quot; &quot;(def t2 :nothing/first-name)&quot; &quot;t2&quot; &quot;(namespace t2)&quot; &quot;(keyword \&quot;\nuser\&quot;)&quot; &quot;(keyword \&quot;nonething\&quot; \&quot;first-name\&quot;)&quot; &quot;(keyword :test1 \&quot;first-name\&quot;)&quot; &quot;(keyword \&quot;db.type\&quot; \&quot;string\&quot;)&quot; &quot;(def t3 {:a 1 :b 2})&quot; &quot;(cond-&gt; nil)&quot; &quot;(use '[bam.db.core :as mydb\n       ])&quot; &quot;l (use '[bam.db.core :as mydb\n         ])&quot; &quot;(ring.middleware.reload)&quot; &quot;(use '[bam.core :as c])&quot; &quot;l (use '[bam.db.core :as mydb])&quot; &quot;(use '[bam.db.core :as mydb])&quot; &quot;(datomic-schema-attribute (first data-schema))&quot; &quot;(let [{:keys [x y] :or {x 0 y 0}} point]\n         (println \&quot;x:\&quot; x \&quot;y:\&quot; y))&quot; &quot;(let [{:keys [x y] :or {x 0 y 0}} {:x 1000}]\n         (println \&quot;x:\&quot; x \&quot;y:\&quot; y))&quot; &quot;(use '[bam.db.core :as mydb] :reload-all\n     )&quot; &quot;(first data-schema\n       )&quot; &quot;(let [{:keys [ns ident type cardinality index doc unique fulltext is-component no-history]} (first data-schema)] &quot; &quot;(let [{:keys [ns ident type cardinality index doc unique fulltext is-component no-history]} (first data-schema)] (println ns) )&quot; &quot;(build-datomic-schema data-schema)&quot; &quot;test1&quot; &quot;(defn test1 [] {:test \&quot;test\&quot;})&quot; &quot;(test1)&quot; &quot;(datomic-schema-attribute (first data-schema\n                                 ))&quot; &quot;(class test2\n       )&quot; &quot;(def test2 (build-datomic-schema data-schema\n                                 ))&quot; &quot;(use '[bam.db.core :as mydb] :reload-all)&quot; &quot;(use '[bam.db.core :as\n       mydb] :reload-all)&quot; &quot;(def test2 (build-datomic-schema data-schema))&quot; &quot;test2&quot; &quot;(source data-types)&quot; &quot;(use '[bam.db.schema :as\n       mydb] :reload-all)&quot; &quot;(map #(ns-unmap *ns* %) (keys (ns-interns *ns*)))&quot; &quot;(map #(ns-unmap *ns* %) (keys (ns-interns user)))&quot; &quot;(map #(ns-unmap *ns* %) (keys (ns-interns 'user)))&quot; &quot;(use '[bam.db.schema :as\n       db1] :reload-all)&quot; &quot;(exit)&quot; &quot;exit&quot; &quot;(quit)&quot;], :remote []}}</component>
</project>