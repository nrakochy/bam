<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1474944727674">{:repl-history {:ide [], :local [&quot;(filter (comp #(= \&quot;user\&quot; %)) data-schema ) &quot; &quot;(source comp)&quot; &quot;(filter (comp #(= (:name data-schema) \&quot;user\&quot;) val) data-schema ) &quot; &quot;(filter (comp #(= (:name {:name \&quot;user\&quot;}) \&quot;user\&quot;) val) data-schema ) &quot; &quot;(filter (comp #(= (:name {:name \&quot;user\&quot;}) %) val) data-schema) &quot; &quot;(filter (comp even? val) {:test 2})&quot; &quot;(use '[\n       bam.db.schema :as \n       \n       db1] :reload-all)&quot; &quot;(filter (comp even? val) data-schema)&quot; &quot;(filter (comp even?\n              val) data-schema)&quot; &quot;(source string?)&quot; &quot;(filter (comp string?\n              val) data-schema)&quot; &quot;(filter (comp string? val) data-schema)&quot; &quot;(filter (comp string? val) (first data-schema) )&quot; &quot;(filter #(= (:name %) \&quot;user\&quot;) (first data-schema) )&quot; &quot;(filter #(= (:ns %) \&quot;user\&quot;) (first data-schema) )&quot; &quot;(def entry (first data-schema))&quot; &quot;entry&quot; &quot;(filter #(= (:ns entry) \&quot;user\&quot;) (first data-schema) )&quot; &quot;(filter #(= (:ns entry) %) (first data-schema) )&quot; &quot;(:ns entry)&quot; &quot;#(= \&quot;user\&quot; \&quot;user\&quot;)&quot; &quot;#(= \&quot;user\&quot; %)&quot; &quot;(filter #(= \&quot;user\&quot; %) data-schema )&quot; &quot;(filter #(= \&quot;user\&quot; (% :ns) data-schema )&quot; &quot;(filter #(= \&quot;user\&quot; (% :ns) ) data-schema )&quot; &quot;(filter-by-ns data-schema)&quot; &quot;(filter-by-ns \&quot;user\&quot; data-schema)&quot; &quot;(filter-by-ns \&quot;user\&quot; (first data-schema) data-schema)&quot; &quot;(filter-by-ns \&quot;user\&quot; (first data-schema))&quot; &quot;data-schema&quot; &quot;(lower-case \&quot;stest\&quot;)&quot; &quot;(re)&quot; &quot;(use '[bam.db.schema :as \n       \n       db1] :reload-all)&quot; &quot;(get-in data-types [(keyword (lower-case \&quot;String\&quot;)) :sch])&quot; &quot;(build-entity-attr {} (first data-schema))&quot; &quot;(def test1 (build-entity-attr {} (first data-schema)) )&quot; &quot;test1&quot; &quot;(build-schema-lib data-schema)&quot; &quot;(class ent)&quot; &quot;User&quot; &quot;(def test5 (build-schema-lib (first data-schema)))&quot; &quot;test5&quot; &quot;(def test5 (build-schema-lib (f\n                               irst data-schema)))&quot; &quot;(\n  use '[bam.db.schema :as \n       \n       db1] :reload-all)&quot; &quot;(build-schema-lib (first data-schema))&quot; &quot;(symbol \&quot;ent\&quot;)&quot; &quot;'(symbol \&quot;ent\&quot;)&quot; &quot;(build-schema-lib (first data-schema\n                         ))&quot; &quot;ggk&quot; &quot;record-ns&quot; &quot;user&quot; &quot;ent&quot; &quot;(\n  \n  use '[bam.db.schema :as \n       \n       db1] :reload-all)&quot; &quot;(build-schema-lib (first data-schema \n                         ))&quot; &quot;(\n  \n  \n  use '[bam.db.schema :as \n       \n       db1] :reload-all)&quot; &quot;(source s/defschema)&quot; &quot;(build-entity-attr (first data-schema))&quot; &quot;(use '[bam.db.schema :as db1] :reload-all)&quot; &quot;(def test1 (create-schema))&quot; &quot;(-&gt; \&quot;test\&quot; prn)&quot; &quot;(-&gt; \&quot;test\&quot; #(apply str \&quot;another\&quot;) prn)&quot; &quot;(-&gt; \&quot;test\&quot; #(apply (str % \&quot; string\&quot;)) prn)&quot; &quot;(-&gt; \&quot;test\&quot; #((str % \&quot; string\&quot;)) prn)&quot; &quot;(-&gt; \&quot;test\&quot; #(str % \&quot; string\&quot;) prn)&quot; &quot;(-&gt; \&quot;test\&quot; :check)&quot; &quot;(defn print-args [x y]\n  (prn x)\n  (prn y)\n  )&quot; &quot;(-&gt; \&quot;test\&quot; \&quot;/nCHECK\&quot; print-args)&quot; &quot;db-inst&quot; &quot;(if true (prn \&quot;true\&quot;) \&quot;false\&quot;)&quot; &quot;(if false (prn \&quot;true\&quot;) \&quot;false\&quot;)&quot; &quot;(if nil? (prn \&quot;true\&quot;) \&quot;false\&quot;)&quot; &quot;datomic-schema&quot; &quot;(use '[bam.db.core :as mydb] :reload-all)&quot; &quot;(create-schema)&quot; &quot;(def path \&quot;./sample.csv\&quot;)&quot; &quot;(parse-csv path)&quot; &quot;(def path1 \&quot;./sample.csv\&quot;)&quot; &quot;(use '[bam.io.file-io :as fio] :reload-all)&quot; &quot;(exit)&quot; &quot;exit&quot; &quot;(def f1 \&quot;./resources/sample.csv\&quot;)&quot; &quot;kkk&quot; &quot;(def all-lines ('(\&quot;username,email\&quot; \&quot;test1test1@example.com\&quot;)))&quot; &quot;(def d1 (seq(\&quot;username,email\&quot; \&quot;test1test1@example.com\&quot;)))&quot; &quot;d1&quot; &quot;(parse-csv f1)&quot; &quot;(def path2 \&quot;./resources/sample.csv\&quot;)&quot; &quot;(parse-csv path2)&quot; &quot;(def t1 [\&quot;username\&quot; \&quot;email\&quot;])&quot; &quot;(def d1  [ t1 [\&quot;test1\&quot; \&quot;test1@example.com\&quot;] ])&quot; &quot;(zipmap (first t1) (last t1))&quot; &quot;(map #(zipmap (first d1) (rest d1)))&quot; &quot;(map #(zipmap (first d1) % ) (rest d1)))&quot; &quot;(map #(zipmap (first d1) % ) (rest d1))&quot; &quot;(use '[bam.io.file-io :as f] :reload-all)&quot; &quot;(f/parse-csv path2)&quot; &quot;(keyword \&quot;db\&quot; \&quot;id\&quot;)&quot; &quot;(keyword \&quot;db\&quot; :id)&quot; &quot;(class (keyword \&quot;db\&quot; \&quot;id\&quot;))&quot; &quot;()&quot; &quot;(use '[bam.db.schema] :reload-all)&quot;], :remote []}}</component>
</project>